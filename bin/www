#!/usr/bin/env node

const app = require('../app');
const http = require('http');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

/* 監聽端口 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


function onError(error) {
  /* error event */
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string' ?
    `Pipe ${port}` :
    `Port ${port}`;

  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} 需要更高全縣`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} 已使用`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/* 事件監聽 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string' ?
    `pipe ${addr}` :
    `port ${addr.port}`;
  console.log(`is ready ${bind}`);
}